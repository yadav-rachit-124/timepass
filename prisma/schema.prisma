// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
    id String @id @default(uuid())
    userId String @unique
    name String
    imageUrl String @db.String
    email String @db.String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    servers Server[]
    members Member[]
    channels Channel[]
}

model Server {
    id String @id @default(uuid())
    name String
    imageUrl String @db.String
    inviteCode String @unique

    profileId String
    profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    @@index([profileId])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    members Member[]
    channels Channel[]
}

enum MemberRole{
    ADMIN
    MODERATOR
    GUEST
}

model Member{
    id String @id @default(uuid())
    role MemberRole @default(GUEST)

    profileId String
    profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    @@index([profileId])

    serverId String
    server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

    @@index([serverId])

    messages Message[]
    directMessages DirectMessage[]

    conversationsInitiated Conversation[] @relation("MemberOne")
    conversationsReceived Conversation[] @relation("MemberTwo")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum ChannelType{
    TEXT
    AUDIO
    VIDEO
}

model Channel{
    id String @id @default(uuid())
    name String
    type ChannelType @default(TEXT)

    profileId String
    profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    @@index([profileId])

    serverId String
    server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

    @@index([serverId])

    messages Message[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Message{
    id String @id @default(uuid())
    content String @db.String

    fileUrl String? @db.String

    memberId String
    member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

    @@index([memberId])

    channelId String
    channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

    @@index([channelId])

    deleted Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Conversation{
    id String @id @default(uuid())

    memberOneId String
    memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

    memberTwoId String
    memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

    @@index([memberTwoId])

    directMessages DirectMessage[]

    @@unique([memberOneId, memberTwoId])
}

model DirectMessage{
    id String @id @default(uuid())
    content String @db.String
    fileUrl String? @db.String

    memberId String
    member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

    @@index([memberId])

    conversationId String
    conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

    @@index([conversationId])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    deleted Boolean @default(false)
}